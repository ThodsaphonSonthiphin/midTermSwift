//
//  main.swift
//  midTermSwift
//
//  Created by thodsaphon on 1/1/2561 BE.
//  Copyright ¬© 2561 thodsaphon. All rights reserved.
//

import Foundation

let frontCards = ["üéÉ","üëª","üéÉ","üëª","üëΩ","ü§ñ","ü¶Ñ","üëΩ","ü§ñ","ü¶Ñ"]
let backCard:Array<String> = Array(repeatElement("üÄ´", count: 10));
var cardInGame = backCard;
var allFlip = 0;
var locationOfCardsFromPlayer:Array<(Int,Int)> = [(0,2),(1,3),(4,7),(5,8),(6,9)]


enum GameError:Error{
    case outOfbound
}

func checkLocationOf(card:(Int,Int))throws{
    guard card.0 <= cardInGame.count-1 else {
        throw GameError.outOfbound;
    }
    guard card.1 <= cardInGame.count-1 else {
        throw GameError.outOfbound;
    }
}

enum DiscriptionOfCard:String{
    case ghost = "üëª"
    case pumkin = "üéÉ"
    case alien = "üëΩ"
    case robotFace = "ü§ñ"
    case unicorn = "ü¶Ñ"
}
func checkDiscriptionOfCard(aCard:String){
    
    if let value = DiscriptionOfCard.init(rawValue: aCard){
        
        
        print("you meet the \(value)");
    }else{
        print("error")
    }

}






/// show cards in the game
///
/// - Parameter cards: array of string
func show(cards:Array<String>){
    for card in cards{
        print("|\(card)|  ",terminator:"");
        //print(_:separator:terminator:)
    }
    
    print("")
}


/// how to play this game
func guide(){
    print("\t\t\t\t\t\t\t\t\t\t\t\t  ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏Å‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà")

    var guildCards:Array<String> = Array(repeatElement("üÄ´", count: 10));
    guildCards[0] = "üéÉ"
    guildCards[2] = "üéÉ"
    show(cards: guildCards);
    print("");
    print("");
    print("#Rule#")

    let rule = """
    1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà. ‡∏ñ‡πâ‡∏≤‡∏†‡∏≤‡∏û‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏û‡πà‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    """


    print(rule)

}

/// calculate score from (card.count * 100) - allFlip
///
/// - Parameter allFlip:
func calculateScoreFrom(allFlip:Int){
    var score = cardInGame.count * 100;
    score = score - allFlip;
    show(score: score);
}

/// show score to player
///
/// - Parameter score: thsi score come from calculatedScore function
func show(score:Int){
    print("you get \(score) score")
}




func checkCard(){
    var setBackCard = Set(backCard);
    var setCardsInGame = Set(cardInGame);
    //‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    while setBackCard.intersection(setCardsInGame).count != 0 {
        //fetch location from array and delete first
        let locationOfCards = locationOfCardsFromPlayer.removeFirst();
        
        allFlip = allFlip + 2;
        
        if frontCards[locationOfCards.0] == frontCards[locationOfCards.1]{
            
            checkDiscriptionOfCard(aCard: frontCards[locationOfCards.0]);
            checkDiscriptionOfCard(aCard: frontCards[locationOfCards.1]);
            
            
            cardInGame[locationOfCards.0] = frontCards[locationOfCards.0];
            cardInGame[locationOfCards.1] = frontCards[locationOfCards.1];
            
            show(cards: cardInGame);
        }
        
        setBackCard = Set(backCard);
        setCardsInGame = Set(cardInGame);
    }
     show(cards: cardInGame);
    calculateScoreFrom(allFlip: allFlip);
}



enum Mode:Int{
    case guide = 1;
    case play = 2;
}


let seslectMode = Mode.init(rawValue: 1)!;

print("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡πà‡∏ô ‡∏Å‡∏î 1")

switch seslectMode {
    
case .guide:
    guide();
    fallthrough;
case .play:
    checkCard();
    
}
do {
    try checkLocationOf(card: (9,9))
} catch {
    print(error)
}


//print(DiscriptionOfCard.ghost);

